library(shinydiffdom)
shiny::runApp('example/app.R')
runApp('example/app.R')
runApp('example/app.R')
source('example/app.R')
shiny::runApp('example/app.R')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
shiny::tags$script(src="diffDOM/diffDOM.js"),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
runApp(shinyApp(ui = ui, server = server))
runApp('example/app.R')
library(shinydiffdom)
# Run the application
runApp(shinyApp(ui = ui, server = server))
library(shinydiffdom)
runApp('example/app.R')
# Define UI for application that draws a histogram
ui <- fluidPage(
shiny::tags$script(src="diffDOM/diffDOM.js"),
shiny::tags$script(src="shinydiffdom.js"),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
div(id="target_div",
div())
)
)
)
# Run the application
runApp(shinyApp(ui = ui, server = server))
# Define UI for application that draws a histogram
ui <- fluidPage(
shiny::tags$script(src="diffDOM/diffDOM.js"),
shiny::tags$script(src="diffDOM/shinydiffdom.js"),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
div(id="target_div",
div())
)
)
)
# Run the application
runApp(shinyApp(ui = ui, server = server))
library(shinydiffdom)
# Define UI for application that draws a histogram
ui <- fluidPage(
shiny::tags$script(src="diffDOM/diffDOM.js"),
shiny::tags$script(src="difDOM/shinydiffdom.js"),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
div(id="target_div",
div())
)
)
)
# Run the application
runApp(shinyApp(ui = ui, server = server))
# Define UI for application that draws a histogram
ui <- fluidPage(
shiny::tags$script(src="diffDOM/diffDOM.js"),
shiny::tags$script(src="diffDOM/shinydiffdom.js"),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
div(id="target_div",
div())
)
)
)
# Run the application
runApp(shinyApp(ui = ui, server = server))
library(shinydiffdom)
runApp('example/app.R')
source('example/app.R')
# Run the application
runApp(shinyApp(ui = ui, server = server))
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
observeEvent(input$bins,{
print("A")
session$sendCustomMessage(type = 'diffdom',
message = list(html= "<h3>Success</h3>"))
})
}
# Run the application
runApp(shinyApp(ui = ui, server = server))
library(shinydiffdom)
library(shinydiffdom)
# Run the application
runApp(shinyApp(ui = ui, server = server))
source('example/app.R')
# Run the application
runApp(shinyApp(ui = ui, server = server))
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
observeEvent(input$bins,{
session$sendCustomMessage(type = 'diffdom',
message = list(html= sprintf("<h3>%s</h3>",input$bins)))
})
}
# Run the application
runApp(shinyApp(ui = ui, server = server))
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
observeEvent(input$bins,{
session$sendCustomMessage(type = 'diffdom',
message = list(html= sprintf('<h3>%s</h3><iframe width="420" height="315"
src="https://www.youtube.com/embed/tgbNymZ7vqY">
</iframe>',input$bins)))
})
}
# Run the application
runApp(shinyApp(ui = ui, server = server))
